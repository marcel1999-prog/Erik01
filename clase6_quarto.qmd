---
title: "Como usar quarto"
author: "Erik Vilchez Bustamante"
format: 
  html:
    toc: true
    toc-location: left
    number-sections: true
    embed_resources: true
    output-file: index
---

# Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).


# como usar quarto?
## fuentes

- negrita: **esto es fuente negrita**
- cursiva: __solanum tuberosum__


## formulas matematicas 

Area de una circunferencia $Area_{circunferencia}=pi.r^2$

esta es una formula cualquiera $$k=\frac{\left(2x-1\right)^2-1}{4}"$$



# Mi primera pagina web
1. Tener mi proyecto
1. Conectar mi proyecto a GitHub 
1. Tener un archivo en formato html llamado 'index.html'
1. Hacer push al repositorio
1. Activar GitHub Pages

#importar archivo
```{r}

source('https://inkaverse.com/setup.r')
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- url %>% 
  as_sheets_id()
fb <- gs %>% 
  range_read("fb")
str(fb)


```

## Modelo lineal 
```{r}
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)

```


### boxplot

```{r}
ggplot(fb, aes(x = geno, y = lfa, colour = riego)) +
  geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
  labs(title = "boxplot con interacción de niveles de riego y genotipo" , 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  #Inclinar etiquetas del eje x

```

#### modelo lineal para hi
```{r}
modelo <- aov(formula = hi ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
```

##### box plot hi
```{r}
ggplot(fb, aes(x = geno, y = hi, colour = riego)) +
  geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
  labs(title = "boxplot con interacción de niveles de riego y genotipo" , 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  #Inclinar etiquetas del eje x

```

##modelos lineal mixtos para lfa
```{r}
library(lme4)
modelo <- lme4::lmer(formula = lfa ~ riego + geno + riego*geno + (1|bloque)
              ,data = fb)
anova(modelo)
plot(modelo)

ol <- boxplot(lfa~riego*geno, fb)
ol
library(inti)
model <- remove_outliers(data = fb
                         ,formula = lfa ~ riego + geno + riego*geno + (1|bloque)
              ,plot_diag = T
              )
model
```

#comparacion de medias
```{r}
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
```
#duncan
```{r}
library(agricolae)
duncan_riego_geno <- duncan.test(modelo, trt = c("riego","geno"), group = TRUE)
print(duncan_riego_geno)
if (!is.null(duncan_riego_geno$groups)) {
  plot(duncan_riego_geno)
} else {
  cat("No se puede graficar, no hay grupos formados.")
}
```
#tukey
```{r}
library(agricolae)
tukey_result <- HSD.test(modelo
                             ,c("geno", "riego")
                             , group = TRUE)

print(tukey_result)
plot(tukey_result)
```

```{r}
tukey_result
library(tidyverse)

grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
```

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) + 
  geom_bar(stat = "identity", position = "dodge", color = "black") + 
  labs(x = "Genotipo", y = "LFA", fill = "Riego") + 
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ggtitle("Gráfico de barras: LFA por genotipo y riego") +
  geom_text(aes(label = groups), 
            position = position_dodge(0.9), 
            vjust = -0.5)  # Ajusta la posición vertical de las letras

```
#emmeans: comparacion de medias 
```{r}
library(lme4)
modelo <- lme4::lmer(formula = hi ~ riego + geno + riego*geno + (1|bloque)
              ,data = fb)
anova(modelo)


library(emmeans)
library(multcomp)
cm1 <- emmeans(modelo, ~ geno | riego) %>% 
  cld(letters = letters, reversed = T)
cm1

cm2 <- emmeans(modelo, ~ riego | geno) %>% 
  cld(letters = letters, reversed = T)
cm2

cm3 <- emmeans(modelo, ~ riego * geno) %>% 
   cld(letters = letters, reversed = T)
cm3

```
```{r}
dtcm <- as.data.frame(cm2) %>% 
  rename(sig = ".group")

ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  geom_text(aes(label = sig, y = emmean*1*1),
            position = position_dodge(width = 0.9),
            vjust = 0) +
  labs(x = "Genotipo", y = "HI", fill = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Gráfico de barras: LFA por genotipo y riego")
```

```{r}
library(tidyverse)
library(corrplot)

# Eliminar filas con NA y seleccionar solo columnas numéricas no vacías
fb_clean <- fb %>%
  select_if(~ is.numeric(.) && any(!is.na(.))) %>%  # Selecciona solo columnas numéricas con al menos un valor no NA
  drop_na()  # Elimina filas con NA restantes

# Verificar que hay columnas numéricas suficientes para calcular la correlación
if (ncol(fb_clean) > 1) {
  # Calcular la matriz de correlación
  cor_matrix <- cor(fb_clean, use = "complete.obs")
  
  # Imprimir la matriz de correlación
  print(cor_matrix)
  
  # Visualizar la matriz de correlación
  corrplot(cor_matrix, method = "circle")
} else {
  cat("No hay suficientes columnas numéricas o datos completos para calcular la correlación.\n")
}
```


























